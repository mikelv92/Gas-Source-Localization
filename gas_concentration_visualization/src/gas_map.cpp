#include "gas_concentration_visualization/gas_map.h"


gas_map::gas_map(double imin_x, double imax_x, double imin_y, double imax_y, double imin_z, double imax_z, double icell_size, double min_val, double max_val, std::string icolormap,std::string iframeid,int n_points_map){
	
	this->colormap=icolormap;
	this->frame_id=iframeid;
	
	this->min_conc=min_val;
	this->max_conc=max_val;
	this->map_min_x=imin_x;
	this->map_max_x=imax_x;
	this->map_min_y=imin_y;
	this->map_max_y=imax_y;
	this->map_min_z=imin_z;
	this->map_max_z=imax_z;
	this->cell_size=icell_size;
	//this->kernel_size=ikernel_size;
	
	//this->sigma_omega = 1/(2*PI*pow(this->kernel_size,2));
	
	this->num_rows = floor((this->map_max_y -this-> map_min_y) / this->cell_size);
	this->num_cols = floor((this->map_max_x - this->map_min_x) / this->cell_size);
	this->num_height = floor((this->map_max_z - this->map_min_z) / this->cell_size);
	
	int sizes[] = { this->num_rows, this->num_cols, this->num_height};
	//int sizes[] = {100,100,100 };
	//cv::Mat concentrationMap(3, sizes, CV_32FC1, cv::Scalar(0)); // this way does not work here.

	this->concentrationMap.create(3,sizes,CV_32FC1);
	this->concentrationMap = cv::Scalar();

/*	this->confidence.create(this->num_rows,this->num_cols,CV_32FC1);
	this->weightedReadings.create(this->num_rows,this->num_cols,CV_32FC1);
	this->weightedVariance.create(this->num_rows,this->num_cols,CV_32FC1);
	this->concentrationMap.create(this->num_rows,this->num_cols,CV_32FC1);
	this->varianceMap.create(this->num_rows,this->num_cols,CV_32FC1);
	
	//robotTrajectory=cv::Mat::zeros(num_rows,num_cols,CV_8UC3);

	this->weights = cv::Scalar(0);
	this->confidence = cv::Scalar(0);
	this->weightedReadings = cv::Scalar(0);
	this->weightedVariance = cv::Scalar(0);
	this->concentrationMap = cv::Scalar(this->global_mean);
	this->varianceMap = cv::Scalar(this->global_variance);

	this->num_samples=0;
	//calculate kernel coefficients
	uint k = floor(6*this->kernel_size/this->cell_size);
	if (k % 2 == 0)
		k++;

	this->kernelCoefficients = cv::getGaussianKernel(k,-1,CV_32F);
	this->kernelCoefficients = this->kernelCoefficients * this->kernelCoefficients.t();
	*/
	
	
	//build the template pointclouds
	float color_r[NUM_CELL_TEMPLATES];
	float color_g[NUM_CELL_TEMPLATES];
	float color_b[NUM_CELL_TEMPLATES];
	 if(this->colormap.compare("jet")==0){
		float temp_color_r[NUM_CELL_TEMPLATES]={0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.02,0.04,0.06,0.08,0.10,0.12,0.14,0.16,0.18,0.20,0.22,0.24,0.26,0.28,0.30,0.32,0.34,0.36,0.38,0.40,0.42,0.44,0.46,0.48,0.50,0.52,0.54,0.56,0.58,0.60,0.62,0.64,0.66,0.68,0.70,0.72,0.74,0.76,0.78,0.80,0.82,0.84,0.86,0.88,0.90,0.92,0.94,0.96,0.98,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.98,0.96,0.94,0.92,0.90,0.88,0.86,0.84,0.82,0.80,0.78,0.76,0.74,0.72,0.70,0.68,0.66,0.64,0.62,0.60,0.58,0.56,0.54,0.52,0.50};
		float temp_color_g[NUM_CELL_TEMPLATES]={0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.02,0.04,0.06,0.08,0.10,0.12,0.14,0.16,0.18,0.20,0.22,0.24,0.26,0.28,0.30,0.32,0.34,0.36,0.38,0.40,0.42,0.44,0.46,0.48,0.50,0.52,0.54,0.56,0.58,0.60,0.62,0.64,0.66,0.68,0.70,0.72,0.74,0.76,0.78,0.80,0.82,0.84,0.86,0.88,0.90,0.92,0.94,0.96,0.98,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.98,0.96,0.94,0.92,0.90,0.88,0.86,0.84,0.82,0.80,0.78,0.76,0.74,0.72,0.70,0.68,0.66,0.64,0.62,0.60,0.58,0.56,0.54,0.52,0.50,0.48,0.46,0.44,0.42,0.40,0.38,0.36,0.34,0.32,0.30,0.28,0.26,0.24,0.22,0.20,0.18,0.16,0.14,0.12,0.10,0.08,0.06,0.04,0.02,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00};
		float temp_color_b[NUM_CELL_TEMPLATES]={0.52,0.54,0.56,0.58,0.60,0.62,0.64,0.66,0.68,0.70,0.72,0.74,0.76,0.78,0.80,0.82,0.84,0.86,0.88,0.90,0.92,0.94,0.96,0.98,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.98,0.96,0.94,0.92,0.90,0.88,0.86,0.84,0.82,0.80,0.78,0.76,0.74,0.72,0.70,0.68,0.66,0.64,0.62,0.60,0.58,0.56,0.54,0.52,0.50,0.48,0.46,0.44,0.42,0.40,0.38,0.36,0.34,0.32,0.30,0.28,0.26,0.24,0.22,0.20,0.18,0.16,0.14,0.12,0.10,0.08,0.06,0.04,0.02,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00};
		for (int ix=0;ix<NUM_CELL_TEMPLATES;ix++) {
			color_r[ix]=temp_color_r[ix];
			color_g[ix]=temp_color_g[ix];
			color_b[ix]=temp_color_b[ix];
		}
	 }
	  else if(this->colormap.compare("hot")==0){
		float temp_color_r[NUM_CELL_TEMPLATES]={0.01,0.03,0.04,0.05,0.07,0.08,0.09,0.11,0.12,0.13,0.15,0.16,0.17,0.19,0.20,0.21,0.23,0.24,0.25,0.27,0.28,0.29,0.31,0.32,0.33,0.35,0.36,0.37,0.39,0.40,0.41,0.43,0.44,0.45,0.47,0.48,0.49,0.51,0.52,0.53,0.55,0.56,0.57,0.59,0.60,0.61,0.63,0.64,0.65,0.67,0.68,0.69,0.71,0.72,0.73,0.75,0.76,0.77,0.79,0.80,0.81,0.83,0.84,0.85,0.87,0.88,0.89,0.91,0.92,0.93,0.95,0.96,0.97,0.99,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00};
		float temp_color_g[NUM_CELL_TEMPLATES]={0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.01,0.03,0.04,0.05,0.07,0.08,0.09,0.11,0.12,0.13,0.15,0.16,0.17,0.19,0.20,0.21,0.23,0.24,0.25,0.27,0.28,0.29,0.31,0.32,0.33,0.35,0.36,0.37,0.39,0.40,0.41,0.43,0.44,0.45,0.47,0.48,0.49,0.51,0.52,0.53,0.55,0.56,0.57,0.59,0.60,0.61,0.63,0.64,0.65,0.67,0.68,0.69,0.71,0.72,0.73,0.75,0.76,0.77,0.79,0.80,0.81,0.83,0.84,0.85,0.87,0.88,0.89,0.91,0.92,0.93,0.95,0.96,0.97,0.99,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00};
		float temp_color_b[NUM_CELL_TEMPLATES]={0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.02,0.04,0.06,0.08,0.10,0.12,0.14,0.16,0.18,0.20,0.22,0.24,0.26,0.28,0.30,0.32,0.34,0.36,0.38,0.40,0.42,0.44,0.46,0.48,0.50,0.52,0.54,0.56,0.58,0.60,0.62,0.64,0.66,0.68,0.70,0.72,0.74,0.76,0.78,0.80,0.82,0.84,0.86,0.88,0.90,0.92,0.94,0.96,0.98,1.00};

		for (int ix=0;ix<NUM_CELL_TEMPLATES;ix++) {
			color_r[ix]=temp_color_r[ix];
			color_g[ix]=temp_color_g[ix];
			color_b[ix]=temp_color_b[ix];
		}
	 }
	  else if(this->colormap.compare("cool")==0){
		
		float temp_color_r[NUM_CELL_TEMPLATES]={0.00,0.01,0.01,0.02,0.02,0.03,0.03,0.04,0.04,0.05,0.05,0.06,0.06,0.07,0.07,0.08,0.08,0.09,0.09,0.10,0.10,0.11,0.11,0.12,0.12,0.13,0.13,0.14,0.14,0.15,0.15,0.16,0.16,0.17,0.17,0.18,0.18,0.19,0.19,0.20,0.20,0.21,0.21,0.22,0.22,0.23,0.23,0.24,0.24,0.25,0.25,0.26,0.26,0.27,0.27,0.28,0.28,0.29,0.29,0.30,0.30,0.31,0.31,0.32,0.32,0.33,0.33,0.34,0.34,0.35,0.35,0.36,0.36,0.37,0.37,0.38,0.38,0.39,0.39,0.40,0.40,0.41,0.41,0.42,0.42,0.43,0.43,0.44,0.44,0.45,0.45,0.46,0.46,0.47,0.47,0.48,0.48,0.49,0.49,0.50,0.50,0.51,0.51,0.52,0.52,0.53,0.53,0.54,0.54,0.55,0.55,0.56,0.56,0.57,0.57,0.58,0.58,0.59,0.59,0.60,0.60,0.61,0.61,0.62,0.62,0.63,0.63,0.64,0.64,0.65,0.65,0.66,0.66,0.67,0.67,0.68,0.68,0.69,0.69,0.70,0.70,0.71,0.71,0.72,0.72,0.73,0.73,0.74,0.74,0.75,0.75,0.76,0.76,0.77,0.77,0.78,0.78,0.79,0.79,0.80,0.80,0.81,0.81,0.82,0.82,0.83,0.83,0.84,0.84,0.85,0.85,0.86,0.86,0.87,0.87,0.88,0.88,0.89,0.89,0.90,0.90,0.91,0.91,0.92,0.92,0.93,0.93,0.94,0.94,0.95,0.95,0.96,0.96,0.97,0.97,0.98,0.98,0.99,0.99,1.00};
		float temp_color_g[NUM_CELL_TEMPLATES]={1.00,0.99,0.99,0.98,0.98,0.97,0.97,0.96,0.96,0.95,0.95,0.94,0.94,0.93,0.93,0.92,0.92,0.91,0.91,0.90,0.90,0.89,0.89,0.88,0.88,0.87,0.87,0.86,0.86,0.85,0.85,0.84,0.84,0.83,0.83,0.82,0.82,0.81,0.81,0.80,0.80,0.79,0.79,0.78,0.78,0.77,0.77,0.76,0.76,0.75,0.75,0.74,0.74,0.73,0.73,0.72,0.72,0.71,0.71,0.70,0.70,0.69,0.69,0.68,0.68,0.67,0.67,0.66,0.66,0.65,0.65,0.64,0.64,0.63,0.63,0.62,0.62,0.61,0.61,0.60,0.60,0.59,0.59,0.58,0.58,0.57,0.57,0.56,0.56,0.55,0.55,0.54,0.54,0.53,0.53,0.52,0.52,0.51,0.51,0.50,0.50,0.49,0.49,0.48,0.48,0.47,0.47,0.46,0.46,0.45,0.45,0.44,0.44,0.43,0.43,0.42,0.42,0.41,0.41,0.40,0.40,0.39,0.39,0.38,0.38,0.37,0.37,0.36,0.36,0.35,0.35,0.34,0.34,0.33,0.33,0.32,0.32,0.31,0.31,0.30,0.30,0.29,0.29,0.28,0.28,0.27,0.27,0.26,0.26,0.25,0.25,0.24,0.24,0.23,0.23,0.22,0.22,0.21,0.21,0.20,0.20,0.19,0.19,0.18,0.18,0.17,0.17,0.16,0.16,0.15,0.15,0.14,0.14,0.13,0.13,0.12,0.12,0.11,0.11,0.10,0.10,0.09,0.09,0.08,0.08,0.07,0.07,0.06,0.06,0.05,0.05,0.04,0.04,0.03,0.03,0.02,0.02,0.01,0.01,0.00};
		float temp_color_b[NUM_CELL_TEMPLATES]={1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00};

		for (int ix=0;ix<NUM_CELL_TEMPLATES;ix++) {
			color_r[ix]=temp_color_r[ix];
			color_g[ix]=temp_color_g[ix];
			color_b[ix]=temp_color_b[ix];
		}
	 }
	 
	  else if(this->colormap.compare("spring")==0){
		float temp_color_r[NUM_CELL_TEMPLATES]={1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00};
		float temp_color_g[NUM_CELL_TEMPLATES]={0.00,0.01,0.01,0.02,0.02,0.03,0.03,0.04,0.04,0.05,0.05,0.06,0.06,0.07,0.07,0.08,0.08,0.09,0.09,0.10,0.10,0.11,0.11,0.12,0.12,0.13,0.13,0.14,0.14,0.15,0.15,0.16,0.16,0.17,0.17,0.18,0.18,0.19,0.19,0.20,0.20,0.21,0.21,0.22,0.22,0.23,0.23,0.24,0.24,0.25,0.25,0.26,0.26,0.27,0.27,0.28,0.28,0.29,0.29,0.30,0.30,0.31,0.31,0.32,0.32,0.33,0.33,0.34,0.34,0.35,0.35,0.36,0.36,0.37,0.37,0.38,0.38,0.39,0.39,0.40,0.40,0.41,0.41,0.42,0.42,0.43,0.43,0.44,0.44,0.45,0.45,0.46,0.46,0.47,0.47,0.48,0.48,0.49,0.49,0.50,0.50,0.51,0.51,0.52,0.52,0.53,0.53,0.54,0.54,0.55,0.55,0.56,0.56,0.57,0.57,0.58,0.58,0.59,0.59,0.60,0.60,0.61,0.61,0.62,0.62,0.63,0.63,0.64,0.64,0.65,0.65,0.66,0.66,0.67,0.67,0.68,0.68,0.69,0.69,0.70,0.70,0.71,0.71,0.72,0.72,0.73,0.73,0.74,0.74,0.75,0.75,0.76,0.76,0.77,0.77,0.78,0.78,0.79,0.79,0.80,0.80,0.81,0.81,0.82,0.82,0.83,0.83,0.84,0.84,0.85,0.85,0.86,0.86,0.87,0.87,0.88,0.88,0.89,0.89,0.90,0.90,0.91,0.91,0.92,0.92,0.93,0.93,0.94,0.94,0.95,0.95,0.96,0.96,0.97,0.97,0.98,0.98,0.99,0.99,1.00};
		float temp_color_b[NUM_CELL_TEMPLATES]={1.00,0.99,0.99,0.98,0.98,0.97,0.97,0.96,0.96,0.95,0.95,0.94,0.94,0.93,0.93,0.92,0.92,0.91,0.91,0.90,0.90,0.89,0.89,0.88,0.88,0.87,0.87,0.86,0.86,0.85,0.85,0.84,0.84,0.83,0.83,0.82,0.82,0.81,0.81,0.80,0.80,0.79,0.79,0.78,0.78,0.77,0.77,0.76,0.76,0.75,0.75,0.74,0.74,0.73,0.73,0.72,0.72,0.71,0.71,0.70,0.70,0.69,0.69,0.68,0.68,0.67,0.67,0.66,0.66,0.65,0.65,0.64,0.64,0.63,0.63,0.62,0.62,0.61,0.61,0.60,0.60,0.59,0.59,0.58,0.58,0.57,0.57,0.56,0.56,0.55,0.55,0.54,0.54,0.53,0.53,0.52,0.52,0.51,0.51,0.50,0.50,0.49,0.49,0.48,0.48,0.47,0.47,0.46,0.46,0.45,0.45,0.44,0.44,0.43,0.43,0.42,0.42,0.41,0.41,0.40,0.40,0.39,0.39,0.38,0.38,0.37,0.37,0.36,0.36,0.35,0.35,0.34,0.34,0.33,0.33,0.32,0.32,0.31,0.31,0.30,0.30,0.29,0.29,0.28,0.28,0.27,0.27,0.26,0.26,0.25,0.25,0.24,0.24,0.23,0.23,0.22,0.22,0.21,0.21,0.20,0.20,0.19,0.19,0.18,0.18,0.17,0.17,0.16,0.16,0.15,0.15,0.14,0.14,0.13,0.13,0.12,0.12,0.11,0.11,0.10,0.10,0.09,0.09,0.08,0.08,0.07,0.07,0.06,0.06,0.05,0.05,0.04,0.04,0.03,0.03,0.02,0.02,0.01,0.01,0.00};

		for (int ix=0;ix<NUM_CELL_TEMPLATES;ix++) {
			color_r[ix]=temp_color_r[ix];
			color_g[ix]=temp_color_g[ix];
			color_b[ix]=temp_color_b[ix];
		}
	 }
	 
	   else if(this->colormap.compare("summer")==0){
		float temp_color_r[NUM_CELL_TEMPLATES]={0.00,0.01,0.01,0.02,0.02,0.03,0.03,0.04,0.04,0.05,0.05,0.06,0.06,0.07,0.07,0.08,0.08,0.09,0.09,0.10,0.10,0.11,0.11,0.12,0.12,0.13,0.13,0.14,0.14,0.15,0.15,0.16,0.16,0.17,0.17,0.18,0.18,0.19,0.19,0.20,0.20,0.21,0.21,0.22,0.22,0.23,0.23,0.24,0.24,0.25,0.25,0.26,0.26,0.27,0.27,0.28,0.28,0.29,0.29,0.30,0.30,0.31,0.31,0.32,0.32,0.33,0.33,0.34,0.34,0.35,0.35,0.36,0.36,0.37,0.37,0.38,0.38,0.39,0.39,0.40,0.40,0.41,0.41,0.42,0.42,0.43,0.43,0.44,0.44,0.45,0.45,0.46,0.46,0.47,0.47,0.48,0.48,0.49,0.49,0.50,0.50,0.51,0.51,0.52,0.52,0.53,0.53,0.54,0.54,0.55,0.55,0.56,0.56,0.57,0.57,0.58,0.58,0.59,0.59,0.60,0.60,0.61,0.61,0.62,0.62,0.63,0.63,0.64,0.64,0.65,0.65,0.66,0.66,0.67,0.67,0.68,0.68,0.69,0.69,0.70,0.70,0.71,0.71,0.72,0.72,0.73,0.73,0.74,0.74,0.75,0.75,0.76,0.76,0.77,0.77,0.78,0.78,0.79,0.79,0.80,0.80,0.81,0.81,0.82,0.82,0.83,0.83,0.84,0.84,0.85,0.85,0.86,0.86,0.87,0.87,0.88,0.88,0.89,0.89,0.90,0.90,0.91,0.91,0.92,0.92,0.93,0.93,0.94,0.94,0.95,0.95,0.96,0.96,0.97,0.97,0.98,0.98,0.99,0.99,1.00};
		float temp_color_g[NUM_CELL_TEMPLATES]={0.50,0.50,0.51,0.51,0.51,0.51,0.52,0.52,0.52,0.52,0.53,0.53,0.53,0.53,0.54,0.54,0.54,0.54,0.55,0.55,0.55,0.55,0.56,0.56,0.56,0.56,0.57,0.57,0.57,0.57,0.58,0.58,0.58,0.58,0.59,0.59,0.59,0.59,0.60,0.60,0.60,0.60,0.61,0.61,0.61,0.61,0.62,0.62,0.62,0.62,0.63,0.63,0.63,0.63,0.64,0.64,0.64,0.64,0.65,0.65,0.65,0.65,0.66,0.66,0.66,0.66,0.67,0.67,0.67,0.67,0.68,0.68,0.68,0.68,0.69,0.69,0.69,0.69,0.70,0.70,0.70,0.70,0.71,0.71,0.71,0.71,0.72,0.72,0.72,0.72,0.73,0.73,0.73,0.73,0.74,0.74,0.74,0.74,0.75,0.75,0.75,0.75,0.76,0.76,0.76,0.76,0.77,0.77,0.77,0.77,0.78,0.78,0.78,0.78,0.79,0.79,0.79,0.79,0.80,0.80,0.80,0.80,0.81,0.81,0.81,0.81,0.82,0.82,0.82,0.82,0.83,0.83,0.83,0.83,0.84,0.84,0.84,0.84,0.85,0.85,0.85,0.85,0.86,0.86,0.86,0.86,0.87,0.87,0.87,0.87,0.88,0.88,0.88,0.88,0.89,0.89,0.89,0.89,0.90,0.90,0.90,0.90,0.91,0.91,0.91,0.91,0.92,0.92,0.92,0.92,0.93,0.93,0.93,0.93,0.94,0.94,0.94,0.94,0.95,0.95,0.95,0.95,0.96,0.96,0.96,0.96,0.97,0.97,0.97,0.97,0.98,0.98,0.98,0.98,0.99,0.99,0.99,0.99,1.00,1.00};
		float temp_color_b[NUM_CELL_TEMPLATES]={0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40};


		for (int ix=0;ix<NUM_CELL_TEMPLATES;ix++) {
			color_r[ix]=temp_color_r[ix];
			color_g[ix]=temp_color_g[ix];
			color_b[ix]=temp_color_b[ix];
		}
	 }	 	 
	 
	 else if(this->colormap.compare("autumn")==0){
		float temp_color_r[NUM_CELL_TEMPLATES]={1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00};
		float temp_color_g[NUM_CELL_TEMPLATES]={0.00,0.01,0.01,0.02,0.02,0.03,0.03,0.04,0.04,0.05,0.05,0.06,0.06,0.07,0.07,0.08,0.08,0.09,0.09,0.10,0.10,0.11,0.11,0.12,0.12,0.13,0.13,0.14,0.14,0.15,0.15,0.16,0.16,0.17,0.17,0.18,0.18,0.19,0.19,0.20,0.20,0.21,0.21,0.22,0.22,0.23,0.23,0.24,0.24,0.25,0.25,0.26,0.26,0.27,0.27,0.28,0.28,0.29,0.29,0.30,0.30,0.31,0.31,0.32,0.32,0.33,0.33,0.34,0.34,0.35,0.35,0.36,0.36,0.37,0.37,0.38,0.38,0.39,0.39,0.40,0.40,0.41,0.41,0.42,0.42,0.43,0.43,0.44,0.44,0.45,0.45,0.46,0.46,0.47,0.47,0.48,0.48,0.49,0.49,0.50,0.50,0.51,0.51,0.52,0.52,0.53,0.53,0.54,0.54,0.55,0.55,0.56,0.56,0.57,0.57,0.58,0.58,0.59,0.59,0.60,0.60,0.61,0.61,0.62,0.62,0.63,0.63,0.64,0.64,0.65,0.65,0.66,0.66,0.67,0.67,0.68,0.68,0.69,0.69,0.70,0.70,0.71,0.71,0.72,0.72,0.73,0.73,0.74,0.74,0.75,0.75,0.76,0.76,0.77,0.77,0.78,0.78,0.79,0.79,0.80,0.80,0.81,0.81,0.82,0.82,0.83,0.83,0.84,0.84,0.85,0.85,0.86,0.86,0.87,0.87,0.88,0.88,0.89,0.89,0.90,0.90,0.91,0.91,0.92,0.92,0.93,0.93,0.94,0.94,0.95,0.95,0.96,0.96,0.97,0.97,0.98,0.98,0.99,0.99,1.00};
		float temp_color_b[NUM_CELL_TEMPLATES]={0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00};

		for (int ix=0;ix<NUM_CELL_TEMPLATES;ix++) {
			color_r[ix]=temp_color_r[ix];
			color_g[ix]=temp_color_g[ix];
			color_b[ix]=temp_color_b[ix];
		}
	 }	 

	 else if(this->colormap.compare("winter")==0){
		float temp_color_r[NUM_CELL_TEMPLATES]={0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00};
		float temp_color_g[NUM_CELL_TEMPLATES]={0.00,0.01,0.01,0.02,0.02,0.03,0.03,0.04,0.04,0.05,0.05,0.06,0.06,0.07,0.07,0.08,0.08,0.09,0.09,0.10,0.10,0.11,0.11,0.12,0.12,0.13,0.13,0.14,0.14,0.15,0.15,0.16,0.16,0.17,0.17,0.18,0.18,0.19,0.19,0.20,0.20,0.21,0.21,0.22,0.22,0.23,0.23,0.24,0.24,0.25,0.25,0.26,0.26,0.27,0.27,0.28,0.28,0.29,0.29,0.30,0.30,0.31,0.31,0.32,0.32,0.33,0.33,0.34,0.34,0.35,0.35,0.36,0.36,0.37,0.37,0.38,0.38,0.39,0.39,0.40,0.40,0.41,0.41,0.42,0.42,0.43,0.43,0.44,0.44,0.45,0.45,0.46,0.46,0.47,0.47,0.48,0.48,0.49,0.49,0.50,0.50,0.51,0.51,0.52,0.52,0.53,0.53,0.54,0.54,0.55,0.55,0.56,0.56,0.57,0.57,0.58,0.58,0.59,0.59,0.60,0.60,0.61,0.61,0.62,0.62,0.63,0.63,0.64,0.64,0.65,0.65,0.66,0.66,0.67,0.67,0.68,0.68,0.69,0.69,0.70,0.70,0.71,0.71,0.72,0.72,0.73,0.73,0.74,0.74,0.75,0.75,0.76,0.76,0.77,0.77,0.78,0.78,0.79,0.79,0.80,0.80,0.81,0.81,0.82,0.82,0.83,0.83,0.84,0.84,0.85,0.85,0.86,0.86,0.87,0.87,0.88,0.88,0.89,0.89,0.90,0.90,0.91,0.91,0.92,0.92,0.93,0.93,0.94,0.94,0.95,0.95,0.96,0.96,0.97,0.97,0.98,0.98,0.99,0.99,1.00};
		float temp_color_b[NUM_CELL_TEMPLATES]={1.00,1.00,0.99,0.99,0.99,0.99,0.98,0.98,0.98,0.98,0.97,0.97,0.97,0.97,0.96,0.96,0.96,0.96,0.95,0.95,0.95,0.95,0.94,0.94,0.94,0.94,0.93,0.93,0.93,0.93,0.92,0.92,0.92,0.92,0.91,0.91,0.91,0.91,0.90,0.90,0.90,0.90,0.89,0.89,0.89,0.89,0.88,0.88,0.88,0.88,0.87,0.87,0.87,0.87,0.86,0.86,0.86,0.86,0.85,0.85,0.85,0.85,0.84,0.84,0.84,0.84,0.83,0.83,0.83,0.83,0.82,0.82,0.82,0.82,0.81,0.81,0.81,0.81,0.80,0.80,0.80,0.80,0.79,0.79,0.79,0.79,0.78,0.78,0.78,0.78,0.77,0.77,0.77,0.77,0.76,0.76,0.76,0.76,0.75,0.75,0.75,0.75,0.74,0.74,0.74,0.74,0.73,0.73,0.73,0.73,0.72,0.72,0.72,0.72,0.71,0.71,0.71,0.71,0.70,0.70,0.70,0.70,0.69,0.69,0.69,0.69,0.68,0.68,0.68,0.68,0.67,0.67,0.67,0.67,0.66,0.66,0.66,0.66,0.65,0.65,0.65,0.65,0.64,0.64,0.64,0.64,0.63,0.63,0.63,0.63,0.62,0.62,0.62,0.62,0.61,0.61,0.61,0.61,0.60,0.60,0.60,0.60,0.59,0.59,0.59,0.59,0.58,0.58,0.58,0.58,0.57,0.57,0.57,0.57,0.56,0.56,0.56,0.56,0.55,0.55,0.55,0.55,0.54,0.54,0.54,0.54,0.53,0.53,0.53,0.53,0.52,0.52,0.52,0.52,0.51,0.51,0.51,0.51,0.50,0.50};

		for (int ix=0;ix<NUM_CELL_TEMPLATES;ix++) {
			color_r[ix]=temp_color_r[ix];
			color_g[ix]=temp_color_g[ix];
			color_b[ix]=temp_color_b[ix];
		}
	 }	 

	 else if(this->colormap.compare("bone")==0){
		float temp_color_r[NUM_CELL_TEMPLATES]={0.00,0.00,0.01,0.01,0.02,0.02,0.03,0.03,0.04,0.04,0.04,0.05,0.05,0.06,0.06,0.07,0.07,0.07,0.08,0.08,0.09,0.09,0.10,0.10,0.11,0.11,0.11,0.12,0.12,0.13,0.13,0.14,0.14,0.15,0.15,0.15,0.16,0.16,0.17,0.17,0.18,0.18,0.18,0.19,0.19,0.20,0.20,0.21,0.21,0.22,0.22,0.22,0.23,0.23,0.24,0.24,0.25,0.25,0.26,0.26,0.26,0.27,0.27,0.28,0.28,0.29,0.29,0.29,0.30,0.30,0.31,0.31,0.32,0.32,0.33,0.33,0.33,0.34,0.34,0.35,0.35,0.36,0.36,0.36,0.37,0.37,0.38,0.38,0.39,0.39,0.40,0.40,0.40,0.41,0.41,0.42,0.42,0.43,0.43,0.44,0.44,0.44,0.45,0.45,0.46,0.46,0.47,0.47,0.47,0.48,0.48,0.49,0.49,0.50,0.50,0.51,0.51,0.51,0.52,0.52,0.53,0.53,0.54,0.54,0.55,0.55,0.55,0.56,0.56,0.57,0.57,0.58,0.58,0.58,0.59,0.59,0.60,0.60,0.61,0.61,0.62,0.62,0.62,0.63,0.63,0.64,0.64,0.65,0.65,0.66,0.66,0.67,0.68,0.68,0.69,0.70,0.70,0.71,0.72,0.72,0.73,0.74,0.74,0.75,0.76,0.77,0.77,0.78,0.79,0.79,0.80,0.81,0.81,0.82,0.83,0.83,0.84,0.85,0.86,0.86,0.87,0.88,0.88,0.89,0.90,0.90,0.91,0.92,0.92,0.93,0.94,0.94,0.95,0.96,0.97,0.97,0.98,0.99,0.99,1.00};
		float temp_color_g[NUM_CELL_TEMPLATES]={0.00,0.00,0.01,0.01,0.02,0.02,0.03,0.03,0.04,0.04,0.04,0.05,0.05,0.06,0.06,0.07,0.07,0.07,0.08,0.08,0.09,0.09,0.10,0.10,0.11,0.11,0.11,0.12,0.12,0.13,0.13,0.14,0.14,0.15,0.15,0.15,0.16,0.16,0.17,0.17,0.18,0.18,0.18,0.19,0.19,0.20,0.20,0.21,0.21,0.22,0.22,0.22,0.23,0.23,0.24,0.24,0.25,0.25,0.26,0.26,0.26,0.27,0.27,0.28,0.28,0.29,0.29,0.29,0.30,0.30,0.31,0.31,0.32,0.32,0.33,0.33,0.34,0.34,0.35,0.36,0.36,0.37,0.37,0.38,0.39,0.39,0.40,0.40,0.41,0.42,0.42,0.43,0.43,0.44,0.45,0.45,0.46,0.46,0.47,0.48,0.48,0.49,0.50,0.50,0.51,0.51,0.52,0.53,0.53,0.54,0.54,0.55,0.56,0.56,0.57,0.57,0.58,0.59,0.59,0.60,0.60,0.61,0.62,0.62,0.63,0.63,0.64,0.65,0.65,0.66,0.66,0.67,0.68,0.68,0.69,0.70,0.70,0.71,0.71,0.72,0.73,0.73,0.74,0.74,0.75,0.76,0.76,0.77,0.77,0.78,0.78,0.79,0.79,0.80,0.80,0.81,0.81,0.82,0.82,0.82,0.83,0.83,0.84,0.84,0.85,0.85,0.85,0.86,0.86,0.87,0.87,0.88,0.88,0.89,0.89,0.89,0.90,0.90,0.91,0.91,0.92,0.92,0.93,0.93,0.93,0.94,0.94,0.95,0.95,0.96,0.96,0.96,0.97,0.97,0.98,0.98,0.99,0.99,1.00,1.00};
		float temp_color_b[NUM_CELL_TEMPLATES]={0.00,0.01,0.01,0.02,0.03,0.03,0.04,0.04,0.05,0.06,0.06,0.07,0.07,0.08,0.09,0.09,0.10,0.10,0.11,0.12,0.12,0.13,0.14,0.14,0.15,0.15,0.16,0.17,0.17,0.18,0.18,0.19,0.20,0.20,0.21,0.21,0.22,0.23,0.23,0.24,0.24,0.25,0.26,0.26,0.27,0.27,0.28,0.29,0.29,0.30,0.30,0.31,0.32,0.32,0.33,0.34,0.34,0.35,0.35,0.36,0.37,0.37,0.38,0.38,0.39,0.40,0.40,0.41,0.41,0.42,0.43,0.43,0.44,0.44,0.45,0.45,0.46,0.46,0.47,0.47,0.48,0.48,0.49,0.49,0.49,0.50,0.50,0.51,0.51,0.52,0.52,0.53,0.53,0.53,0.54,0.54,0.55,0.55,0.56,0.56,0.56,0.57,0.57,0.58,0.58,0.59,0.59,0.60,0.60,0.60,0.61,0.61,0.62,0.62,0.63,0.63,0.64,0.64,0.64,0.65,0.65,0.66,0.66,0.67,0.67,0.67,0.68,0.68,0.69,0.69,0.70,0.70,0.71,0.71,0.71,0.72,0.72,0.73,0.73,0.74,0.74,0.74,0.75,0.75,0.76,0.76,0.77,0.77,0.78,0.78,0.78,0.79,0.79,0.80,0.80,0.81,0.81,0.82,0.82,0.82,0.83,0.83,0.84,0.84,0.85,0.85,0.85,0.86,0.86,0.87,0.87,0.88,0.88,0.89,0.89,0.89,0.90,0.90,0.91,0.91,0.92,0.92,0.93,0.93,0.93,0.94,0.94,0.95,0.95,0.96,0.96,0.96,0.97,0.97,0.98,0.98,0.99,0.99,1.00,1.00};


		for (int ix=0;ix<NUM_CELL_TEMPLATES;ix++) {
			color_r[ix]=temp_color_r[ix];
			color_g[ix]=temp_color_g[ix];
			color_b[ix]=temp_color_b[ix];
		}
	 }	 

	 else if(this->colormap.compare("copper")==0){
		float temp_color_r[NUM_CELL_TEMPLATES]={0.00,0.01,0.01,0.02,0.03,0.03,0.04,0.04,0.05,0.06,0.06,0.07,0.08,0.08,0.09,0.09,0.10,0.11,0.11,0.12,0.13,0.13,0.14,0.14,0.15,0.16,0.16,0.17,0.18,0.18,0.19,0.19,0.20,0.21,0.21,0.22,0.23,0.23,0.24,0.24,0.25,0.26,0.26,0.27,0.28,0.28,0.29,0.30,0.30,0.31,0.31,0.32,0.33,0.33,0.34,0.35,0.35,0.36,0.36,0.37,0.38,0.38,0.39,0.40,0.40,0.41,0.41,0.42,0.43,0.43,0.44,0.45,0.45,0.46,0.46,0.47,0.48,0.48,0.49,0.50,0.50,0.51,0.52,0.52,0.53,0.53,0.54,0.55,0.55,0.56,0.57,0.57,0.58,0.58,0.59,0.60,0.60,0.61,0.62,0.62,0.63,0.63,0.64,0.65,0.65,0.66,0.67,0.67,0.68,0.68,0.69,0.70,0.70,0.71,0.72,0.72,0.73,0.73,0.74,0.75,0.75,0.76,0.77,0.77,0.78,0.79,0.79,0.80,0.80,0.81,0.82,0.82,0.83,0.84,0.84,0.85,0.85,0.86,0.87,0.87,0.88,0.89,0.89,0.90,0.90,0.91,0.92,0.92,0.93,0.94,0.94,0.95,0.95,0.96,0.97,0.97,0.98,0.99,0.99,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00};
		float temp_color_g[NUM_CELL_TEMPLATES]={0.00,0.00,0.01,0.01,0.02,0.02,0.02,0.03,0.03,0.04,0.04,0.04,0.05,0.05,0.05,0.06,0.06,0.07,0.07,0.07,0.08,0.08,0.09,0.09,0.09,0.10,0.10,0.11,0.11,0.11,0.12,0.12,0.13,0.13,0.13,0.14,0.14,0.15,0.15,0.15,0.16,0.16,0.16,0.17,0.17,0.18,0.18,0.18,0.19,0.19,0.20,0.20,0.20,0.21,0.21,0.22,0.22,0.22,0.23,0.23,0.24,0.24,0.24,0.25,0.25,0.26,0.26,0.26,0.27,0.27,0.27,0.28,0.28,0.29,0.29,0.29,0.30,0.30,0.31,0.31,0.31,0.32,0.32,0.33,0.33,0.33,0.34,0.34,0.35,0.35,0.35,0.36,0.36,0.37,0.37,0.37,0.38,0.38,0.38,0.39,0.39,0.40,0.40,0.40,0.41,0.41,0.42,0.42,0.42,0.43,0.43,0.44,0.44,0.44,0.45,0.45,0.46,0.46,0.46,0.47,0.47,0.48,0.48,0.48,0.49,0.49,0.49,0.50,0.50,0.51,0.51,0.51,0.52,0.52,0.53,0.53,0.53,0.54,0.54,0.55,0.55,0.55,0.56,0.56,0.57,0.57,0.57,0.58,0.58,0.58,0.59,0.59,0.60,0.60,0.60,0.61,0.61,0.62,0.62,0.62,0.63,0.63,0.64,0.64,0.64,0.65,0.65,0.66,0.66,0.66,0.67,0.67,0.68,0.68,0.68,0.69,0.69,0.69,0.70,0.70,0.71,0.71,0.71,0.72,0.72,0.73,0.73,0.73,0.74,0.74,0.75,0.75,0.75,0.76,0.76,0.77,0.77,0.77,0.78,0.78};
		float temp_color_b[NUM_CELL_TEMPLATES]={0.00,0.00,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.02,0.03,0.03,0.03,0.03,0.03,0.04,0.04,0.04,0.04,0.05,0.05,0.05,0.06,0.06,0.06,0.06,0.07,0.07,0.07,0.07,0.07,0.08,0.08,0.08,0.08,0.09,0.09,0.09,0.10,0.10,0.10,0.10,0.11,0.11,0.11,0.11,0.12,0.12,0.12,0.12,0.12,0.13,0.13,0.13,0.14,0.14,0.14,0.14,0.14,0.15,0.15,0.15,0.16,0.16,0.16,0.16,0.17,0.17,0.17,0.17,0.18,0.18,0.18,0.18,0.19,0.19,0.19,0.19,0.19,0.20,0.20,0.20,0.21,0.21,0.21,0.21,0.22,0.22,0.22,0.22,0.23,0.23,0.23,0.23,0.23,0.24,0.24,0.24,0.25,0.25,0.25,0.25,0.26,0.26,0.26,0.26,0.27,0.27,0.27,0.27,0.27,0.28,0.28,0.28,0.29,0.29,0.29,0.29,0.29,0.30,0.30,0.30,0.30,0.31,0.31,0.31,0.32,0.32,0.32,0.32,0.33,0.33,0.33,0.33,0.34,0.34,0.34,0.34,0.34,0.35,0.35,0.35,0.35,0.36,0.36,0.36,0.36,0.37,0.37,0.37,0.38,0.38,0.38,0.38,0.39,0.39,0.39,0.39,0.40,0.40,0.40,0.40,0.40,0.41,0.41,0.41,0.41,0.42,0.42,0.42,0.42,0.43,0.43,0.43,0.44,0.44,0.44,0.44,0.45,0.45,0.45,0.45,0.45,0.46,0.46,0.46,0.47,0.47,0.47,0.47,0.48,0.48,0.48,0.48,0.48,0.49,0.49,0.49,0.50,0.50};

		for (int ix=0;ix<NUM_CELL_TEMPLATES;ix++) {
			color_r[ix]=temp_color_r[ix];
			color_g[ix]=temp_color_g[ix];
			color_b[ix]=temp_color_b[ix];
		}
	 }	
	 
	 else if(this->colormap.compare("red")==0){
		float temp_color_r[NUM_CELL_TEMPLATES];
		float temp_color_g[NUM_CELL_TEMPLATES];
		float temp_color_b[NUM_CELL_TEMPLATES];
		 
		for (int idx_c=0;idx_c<NUM_CELL_TEMPLATES;idx_c++){
			temp_color_r[idx_c]=(float)idx_c/(float)NUM_CELL_TEMPLATES; 
			temp_color_g[idx_c]=0;
			temp_color_b[idx_c]=0;
		}
		for (int ix=0;ix<NUM_CELL_TEMPLATES;ix++) {
			color_r[ix]=temp_color_r[ix];
			color_g[ix]=temp_color_g[ix];
			color_b[ix]=temp_color_b[ix];
		}
	 }	
	 else if(this->colormap.compare("green")==0){
		 
		for (int idx_c=0;idx_c<NUM_CELL_TEMPLATES;idx_c++){
			color_r[idx_c]=0; 
			color_g[idx_c]=(float)idx_c/(float)NUM_CELL_TEMPLATES;
			color_b[idx_c]=0;
		}
	 }	
	 
	 else {

		 
		for (int idx_c=0;idx_c<NUM_CELL_TEMPLATES;idx_c++){
			color_r[idx_c]=0; 
			color_g[idx_c]=0;
			color_b[idx_c]=(float)idx_c/(float)NUM_CELL_TEMPLATES;
		}

	 }	
	 	 
	 
	 	 	  

	for (int t = 0; t < NUM_CELL_TEMPLATES; t++){
		float conc = (float)t / (float)NUM_CELL_TEMPLATES;
		
		pcl::PointCloud<pcl::PointXYZRGB> curr_pc;
		curr_pc.width = round(conc * n_points_map)+50;
		//ROS_INFO("For %d, the number of cells is %d",t,curr_pc.width);
		curr_pc.height = 1;
		curr_pc.points.resize (curr_pc.width * curr_pc.height);
	
		for (size_t j = 0; j < curr_pc.points.size(); j++)
		{
		    curr_pc.points[j].x = - this->cell_size / 2.0 +  this->cell_size * rand() / (RAND_MAX + 1.0f);
		    curr_pc.points[j].y = - this->cell_size / 2.0 +  this->cell_size * rand() / (RAND_MAX + 1.0f);
		    curr_pc.points[j].z = - this->cell_size / 2.0 +  this->cell_size * rand() / (RAND_MAX + 1.0f);
		    
		   
		    curr_pc.points[j].r = round(255*color_r[t]);//0*255;
		    curr_pc.points[j].g = round(255*color_g[t]);//conc*255;//1;//conc*255;
		    curr_pc.points[j].b = round(255*color_b[t]);//0*255;
		}
		
		template_cells[t] = curr_pc;
	}
	ROS_INFO("--------------------------------------------------");
	ROS_INFO("      Map initialized");
	ROS_INFO("- Size (rxc) %d x %d x %d", this->num_rows, this->num_cols, this->num_height);
	ROS_INFO("--------------------------------------------------");
}


void gas_map::addDataPoint(double x, double y, double z, double reading){

	//if the new points fall out of bounds do not update the values
	if (x < this->map_min_x || x > this->map_max_x || y < this->map_min_y || y > this->map_max_y)
	{
		return;
	}

	//update the global average and variance of measurements
	//this->num_samples++;
	
	/*
	this->global_mean = (this->num_samples - 1) / this->num_samples * this->global_mean + (reading / this->num_samples);
	
	if (this->num_samples == 1)
	{
		this->global_variance = 0;
	}	
	else
	{
		this->global_variance = (this->num_samples - 1) / this->num_samples * this->global_variance + 1 / (this->num_samples - 1) * pow(reading - this->global_mean,2);

	}
	*/



	//calculate the cell of the map in which the new measurement falls
	int x_cell = floor((x-this->map_min_x)/this->cell_size);
	int y_cell = floor((y-this->map_min_y)/this->cell_size);
	int z_cell = floor((z-this->map_min_z)/this->cell_size);

	//ROS_INFO("Add point to map: x= %4.2f y= %4.2f r= %4.8f, cells %d,%d",x,y,reading,x_cell,y_cell);



	/*int half_mask = floor(this->kernelCoefficients.rows / 2);
	int min_affected_x = std::max(x_cell-half_mask,0);
	int max_affected_x = std::min(x_cell+half_mask,this->weights.cols);
	int min_affected_y = std::max(y_cell-half_mask,0);
	int max_affected_y = std::min(y_cell+half_mask,this->weights.rows);*/

	//int height = 1;//max_affected_y-min_affected_y + 1;
	//int width = 1;//max_affected_x-min_affected_x + 1;

	//this->concentrationMap.at<float>(y_cell,x_cell,z_cell) = (reading + this->concentrationMap.at<float>(y_cell,x_cell,z_cell)*(flag-1))/flag;
	this->concentrationMap.at<float>(y_cell,x_cell,z_cell) = reading + this->concentrationMap.at<float>(y_cell,x_cell,z_cell);

	/*if(reading >0){
		ROS_INFO("cell xyz:  %d, %d, %d ", y_cell,x_cell,z_cell);
		//ROS_INFO("Concentration at cell is %f",this->concentrationMap.at<float>(y_cell,x_cell,z_cell));
	}*/
}

void gas_map::publishMap(ros::Publisher &gdm_publisher){

	sensor_msgs::PointCloud2 cloud_pub;

	pcl::PointCloud<pcl::PointXYZRGB> acc_cloud;

	int idx_x=0;
	int idx_y=0;
	int idx_z=0;
	int idx_cloud=0;
	int aux=0;
	double min_value= 1000000000000; // min_value is set to be larger than max_value, which is correct. Please do not worry about it.
	double max_value= -100000000000;

	if (this->min_conc == 0 && this->max_conc == 0) {
		for (int ixm=0;ixm<this->num_rows;ixm++){
			for (int jxm=0;jxm<this->num_cols;jxm++){
				for (int kxm=0;kxm<this->num_height;kxm++){
					if(this->concentrationMap.at<float>(ixm,jxm,kxm) > max_value){
						max_value=this->concentrationMap.at<float>(ixm,jxm,kxm);
						//ROS_INFO(" ----new max---- %f", max_value);
					}

					if(this->concentrationMap.at<float>(ixm,jxm,kxm) < min_value){
						min_value=this->concentrationMap.at<float>(ixm,jxm,kxm);
						//ROS_INFO(" ----new min----- %f", min_value);
					}
				}
			}

		}
	}

	// In these three for loops, idx_x, idx_y, idx_z can be equal to num_rows, num_cols, and num_height respectively, so this might bring some problems.
	for(double i =this->map_min_y;i<=this->map_max_y;i+=((this->map_max_y-this->map_min_y)/(double(this->num_rows)-1)))
	{
		for(double j=this->map_min_x;j<this->map_max_x;j+=((this->map_max_x-this->map_min_x)/(double(this->num_cols)-1)))
		{
			for(double k=this->map_min_z;k<this->map_max_z;k+=((this->map_max_z-this->map_min_z)/(double(this->num_height)-1)))
			{
				double conc_value; // normalization
				if(this->min_conc == this->max_conc) {
					conc_value=(this->concentrationMap.at<float>(idx_y,idx_x,idx_z)-min_value)/(max_value-min_value);


					//ROS_INFO("-----------------------id xyz:  %d, %d, %d ", idx_y,idx_x,idx_z);

					/*if(conc_value>0){
						ROS_INFO("Got normalized con_value:  %f", conc_value);
					}*/

				}
				else{
					//conc_value=(this->concentrationMap.at<float>(idx_y,idx_x,idx_z)-this->min_conc)/(this->max_conc-this->min_conc);
					conc_value=this->concentrationMap.at<float>(idx_y,idx_x,idx_z)/(max_conc);
				}

				if (conc_value < 0){
					conc_value=0.0;
				}
				if (conc_value > 1.0){
					conc_value=1.0;
				}


				if(conc_value > 0){

					conc_value = sqrt(conc_value);

					pcl::PointCloud<pcl::PointXYZRGB> temp_cloud;

					int idx = floor((float)NUM_CELL_TEMPLATES * conc_value);
					idx=std::min(idx,199);

					//ROS_INFO(" ---- %d,%d",idx,temp_cloud.points.size());
					temp_cloud = template_cells[idx];
					//if(idx>0){
					//ROS_INFO(" ------------ %d, %d ",idx,temp_cloud.points.size());

					//}



					for (size_t ic = 0; ic < temp_cloud.points.size(); ic++)
					{

						temp_cloud.points[ic].x += j;
						temp_cloud.points[ic].y += i;
						temp_cloud.points[ic].z += k;//-1.5;
					}


					if(aux==0){
						acc_cloud=temp_cloud;
						aux=1;
					}
					else{
						acc_cloud+=temp_cloud;

					}

				}
                //idx_z=0;
				idx_z++;
				if (idx_z>this->num_height)
					idx_z=this->num_height;
			}
			idx_z=0;
			idx_x++;
			if (idx_x>this->num_cols)
				idx_x=this->num_cols;
		}
		idx_x=0;
		idx_y++;
		if (idx_y>this->num_rows)
			idx_y=this->num_rows;

	}

	pcl::PCLPointCloud2 temp_clouds;
	pcl::toPCLPointCloud2(acc_cloud, temp_clouds);	
	//pcl::toROSMsg(acc_cloud,cloud_pub);
	pcl_conversions::moveFromPCL(temp_clouds, cloud_pub);
	cloud_pub.header.frame_id = this->frame_id.c_str(); 
	//cloud_pub.header.stamp = ros::Time::now();
	gdm_publisher.publish(cloud_pub);	

}

